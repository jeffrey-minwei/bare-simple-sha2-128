name: Bare-metal CI

on:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      ARM_VER: 13.2.rel1
      ARM_TAR: arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz
      ARM_URL: https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz
      NRFXLIB_DIR: ${{ github.workspace }}/third_party/nrfxlib
      NRFXLIB_TAG: v3.1-branch

    steps:
      - uses: actions/checkout@v4

      - name: Cache ARM toolchain
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/arm-gnu-toolchain-${{ env.ARM_VER }}
          key: arm-gnu-${{ env.ARM_VER }}-linux-x64

      - name: Setup ARM toolchain
        run: |
          TOOLDIR="$RUNNER_TOOL_CACHE/arm-gnu-toolchain-${ARM_VER}"
          mkdir -p "$TOOLDIR"
          if [ ! -x "$TOOLDIR/bin/arm-none-eabi-gcc" ]; then
            curl -L -o /tmp/${ARM_TAR} ${ARM_URL}
            tar -C "$TOOLDIR" --strip-components=1 -xf /tmp/${ARM_TAR}
          fi
          echo "$TOOLDIR/bin" >> "$GITHUB_PATH"

      - name: Cache nrfxlib
        id: cache-nrfxlib
        uses: actions/cache@v4
        with:
          path: ${{ env.NRFXLIB_DIR }}
          key: nrfxlib-${{ env.NRFXLIB_TAG }}

      - name: Fetch nrfxlib (cache miss only)
        if: steps.cache-nrfxlib.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: nrfconnect/sdk-nrfxlib
          ref: ${{ env.NRFXLIB_TAG }}
          path: ${{ env.NRFXLIB_DIR }}
          fetch-depth: 1

      - name: Assert nrfxlib present
        run: test -d "${NRFXLIB_DIR}/crypto"

      - name: Locate nrf_cc310_bl static libs (soft-float only)
        run: |
          set -euo pipefail
          ROOT="${NRFXLIB_DIR:-${GITHUB_WORKSPACE}/third_party/nrfxlib}"
          paths=$(find "${roots[@]}" -type f -name 'libnrf_cc310_bl*.a' 2>/dev/null | grep '/soft-float/' | sort -u)
          if [ -z "$paths" ]; then
            echo "FATAL: no libnrf_cc310_bl*.a (soft-float) found" >&2
            find "${roots[@]}" -type f -name 'libnrf_cc310_bl*.a' 2>/dev/null | sort -u || true
            exit 1
          fi
          printf '%s\n' "$paths"
          {
            echo 'cc310_bl_paths<<EOF'
            printf '%s\n' "$paths"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Find CC310/CC312 C/H files in nrfxlib
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${NRFXLIB_DIR:-${GITHUB_WORKSPACE}/third_party/nrfxlib}"
          test -d "$ROOT" || { echo "FATAL: nrfxlib not found at $ROOT"; exit 1; }
      
          # find file/path contains cc310/cc312 .c/.h files (case-insensitive)
          mapfile -t HITS < <(
            find "$ROOT" -type f \
              \( -iname "*cc31[02]*.c" -o -iname "*cc31[02]*.h" \
                 -o -ipath "*/cc31[02]/*.c" -o -ipath "*/cc31[02]/*.h" \) \
              | sort
          )
      
          if [ "${#HITS[@]}" -eq 0 ]; then
            echo "FATAL: No CC310/CC312 .c/.h files under $ROOT"
            exit 1
          fi
      
          printf 'FOUND: %s\n' "${HITS[@]}"

      - name: Build x86
        run: |
          set -e
          make clean
          make TARGET=x86

      - name: Build nrf52840
        run: |
          set -e
          make clean
          make TARGET=nrf52840 NRFXLIB_DIR="${NRFXLIB_DIR}"

      - name: Show sign_nrf52840.map
        shell: bash
        run: |
          set -e
          head -n 300 sign_nrf52840.map

      - name: Run in Renode
        run: make ci-run-nrf52840

      - name: Build nRF5340 DK
        run: |
          set -e
          make clean
          make TARGET=nrf5340 NRFXLIB_DIR="${NRFXLIB_DIR}"

      - name: Show sign_nrf5340.map
        shell: bash
        run: |
          set -e
          head -n 300 sign_nrf5340.map
