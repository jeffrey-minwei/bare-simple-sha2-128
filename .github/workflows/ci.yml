name: Bare-metal CI

on:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      ARM_VER: 14.2.rel1
      ARM_TAR: arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi.tar.xz
      ARM_URL: https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi.tar.xz
      NRFXLIB_DIR: ${{ github.workspace }}/third_party/nrfxlib
      NRFXLIB_TAG: v3.1-branch

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Quick check for psa/crypto.h
        shell: bash
        run: |
          set -Eeuo pipefail
          ls -la third_party/mbedtls/include/psa/crypto.h || (echo "missing psa/crypto.h" && exit 1)

      - name: Cache ARM toolchain
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/arm-gnu-toolchain-${{ env.ARM_VER }}
          key: arm-gnu-${{ env.ARM_VER }}-linux-x64

      - name: Setup ARM toolchain
        run: |
          TOOLDIR="$RUNNER_TOOL_CACHE/arm-gnu-toolchain-${ARM_VER}"
          mkdir -p "$TOOLDIR"
          if [ ! -x "$TOOLDIR/bin/arm-none-eabi-gcc" ]; then
            curl -L -o /tmp/${ARM_TAR} ${ARM_URL}
            tar -C "$TOOLDIR" --strip-components=1 -xf /tmp/${ARM_TAR}
          fi
          echo "$TOOLDIR/bin" >> "$GITHUB_PATH"

      - name: Check cache after setup (lookup-only)
        id: cache-arm-post
        uses: actions/cache/restore@v4
        with:
          path: ${{ runner.tool_cache }}/arm-gnu-toolchain-${{ env.ARM_VER }}
          key: arm-gnu-${{ env.ARM_VER }}-linux-x64
          lookup-only: true

      - name: Save ARM toolchain cache
        if: steps.cache-arm.outputs.cache-hit != 'true' && steps.cache-arm-post.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ${{ runner.tool_cache }}/arm-gnu-toolchain-${{ env.ARM_VER }}
          key: arm-gnu-${{ env.ARM_VER }}-linux-x64

      - name: Summary for cache ARM toolchain
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x .github/workflows/write_job_summary.sh
          .github/workflows/write_job_summary.sh

      - name: KAT
        run: |
          set -e
          make clean
          make TARGET=x86 kat

      # compute cache key（根據 ETag/Last-Modified； use date if fail）
      - name: Compute cache key (renode-latest.linux-portable.tar)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          URL="https://builds.renode.io/renode-latest.linux-portable.tar.gz"
          META="$(curl -sI "$URL" | tr -d '\r' | awk -F': ' 'tolower($1)=="etag"||tolower($1)=="last-modified"{print $2}' | tr '\n' ' ')"
          if [ -z "$META" ]; then META="$(date -u +%Y%m%d)"; fi
          KEY="$(printf "%s" "$META" | sha256sum | cut -d' ' -f1)"
          echo "key=$KEY" >> "$GITHUB_OUTPUT"

      - name: Restore Renode portable from cache
        id: cache
        uses: actions/cache@v4
        with:
          path: renode_portable
          key: renode-portable-${{ steps.meta.outputs.key }}
          restore-keys: |
            renode-portable-

      - name: Download & extract Renode portable (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -eux
          mkdir -p renode_portable
          wget -q https://builds.renode.io/renode-latest.linux-portable.tar.gz -O renode-latest.linux-portable.tar.gz
          tar xf renode-latest.linux-portable.tar.gz -C renode_portable --strip-components=1

      - name: Show Renode version
        run: ./renode_portable/renode --version

#      - name: Resolve CC3xx platform lib (nRF5340 AppCore, hard-float)
#        shell: bash
#        run: |
#          set -Eeuo pipefail
#          chmod +x .github/workflows/locate_cc3xx_platform_lib.sh
#          .github/workflows/locate_cc3xx_platform_lib.sh

      - name: assert mbedtls static libs are ABSENT
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x .github/workflows/assert_no_mbedtls_libs.sh
          .github/workflows/assert_no_mbedtls_libs.sh

      - name: Cache nrfxlib
        id: cache-nrfxlib
        uses: actions/cache@v4
        with:
          path: ${{ env.NRFXLIB_DIR }}
          key: nrfxlib-${{ env.NRFXLIB_TAG }}

      - name: Fetch nrfxlib (cache miss only)
        if: steps.cache-nrfxlib.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: nrfconnect/sdk-nrfxlib
          ref: ${{ env.NRFXLIB_TAG }}
          path: ${{ env.NRFXLIB_DIR }}
          fetch-depth: 1

      - name: Assert nrfxlib present
        run: test -d "${NRFXLIB_DIR}/crypto"

      - name: Locate nrf_cc310_bl static libs (soft-float only)
        id: locate-cc310-bl
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x .github/workflows/locate_cc310_bl_soft_float.sh
          .github/workflows/locate_cc310_bl_soft_float.sh

      - name: Find CC310/CC312 C/H files in nrfxlib
        shell: bash
        run: |
          set -Eeuo pipefail
          chmod +x .github/workflows/find_cc31x_files.sh
          .github/workflows/find_cc31x_files.sh

      - name: Build nrf52840
        run: |
          set -e
          make clean && make TARGET=nrf52840 NRFXLIB_DIR="${NRFXLIB_DIR}"

      - name: Show sign_nrf52840.map
        shell: bash
        run: |
          set -e
          head -n 300 sign_nrf52840.map

      - name: Run in Renode (nrf52840)
        run: make TARGET=nrf52840 NRFXLIB_DIR="${NRFXLIB_DIR}" ci-run-nrf52840

      - name: Build nRF5340 DK
        run: |
          set -e
          make TARGET=nrf5340dk NRFXLIB_DIR="${NRFXLIB_DIR}"

#      - name: Build nRF5340 DK (hard)
#        run: |
#          set -e
#          make TARGET=nrf5340dk_hard NRFXLIB_DIR="${NRFXLIB_DIR}"

      - name: Show sign_nrf5340dk.map
        shell: bash
        run: |
          set -e
          head -n 300 sign_nrf5340dk.map

      - name: Run in Renode (nrf5340dk)
        run: make TARGET=nrf5340dk NRFXLIB_DIR="${NRFXLIB_DIR}" ci-run-nrf5340dk

#      - name: Make HEX from sign_nrf5340dk_hard.elf
#        shell: bash
#        run: |
#          set -euo pipefail
#          arm-none-eabi-objcopy -O ihex sign_nrf5340dk_hard.elf sign_nrf5340dk_hard.hex
#          ls -l sign_nrf5340dk_hard.elf sign_nrf5340dk_hard.hex

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ github.sha }}
          path: |
            **/*.elf
            **/*.hex
            **/*.map
