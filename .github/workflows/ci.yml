name: Bare-metal CI

on:
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      ARM_VER: 13.2.rel1
      ARM_TAR: arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz
      ARM_URL: https://developer.arm.com/-/media/Files/downloads/gnu/13.2.rel1/binrel/arm-gnu-toolchain-13.2.rel1-x86_64-arm-none-eabi.tar.xz
      NRFXLIB_DIR: ${{ github.workspace }}/third_party/nrfxlib
      NRFXLIB_TAG: v3.1-branch

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
          fetch-depth: 0

      # === cache submodules start ===
      - name: Resolve submodule SHAs
        id: submods
        shell: bash
        run: |
          set -Eeuo pipefail
          : > submods.lock
          if [ -s .gitmodules ]; then
            while IFS= read -r p; do
              [ -n "$p" ] || continue
              sha="$(git ls-tree -d HEAD -- "$p" | awk '{print $3}')"
              [ -n "$sha" ] || continue
              echo "$sha $p" >> submods.lock
            done < <(git config -f .gitmodules --get-regexp '^submodule\..*\.path' | awk '{print $3}')
          fi
          echo "paths=$(awk '{print $2}' submods.lock | tr '\n' ' ')" >> "$GITHUB_OUTPUT"

      - name: Cache submodules
        id: cache-submods
        uses: actions/cache@v4
        with:
          path: |
            .git/modules
            ${{ steps.submods.outputs.paths }}
          key: submodules-${{ hashFiles('submods.lock') }}

      - name: Ensure submodules present
        shell: bash
        run: |
          set -Eeuo pipefail
          need_init=0
          if [ -s .gitmodules ]; then
            # 若 cache miss，或任何子模組資料夾不存在，就 init
            if [ "${{ steps.cache-submods.outputs.cache-hit }}" != "true" ]; then
              need_init=1
            else
              while read -r _ path; do
                [ -d "$path/.git" ] || need_init=1
              done < submods.lock
            fi
            if [ "$need_init" -eq 1 ]; then
              git submodule sync --recursive
              git submodule update --init --recursive --depth=1
            fi
            # 對齊到預期 SHA
            while read -r sha path; do
              [ -d "$path" ] || continue
              git -C "$path" fetch -q --depth=1 origin "$sha" || true
              git -C "$path" checkout -q "$sha"
            done < submods.lock
            git submodule status --recursive
          fi

      - name: Quick check for psa/crypto.h
        shell: bash
        run: |
          set -Eeuo pipefail
          ls -la third_party/mbedtls/include/psa/crypto.h || (echo "missing psa/crypto.h" && exit 1)
          # === cache submodules end ===

      - name: Cache ARM toolchain
        uses: actions/cache@v4
        with:
          path: ${{ runner.tool_cache }}/arm-gnu-toolchain-${{ env.ARM_VER }}
          key: arm-gnu-${{ env.ARM_VER }}-linux-x64

      - name: Setup ARM toolchain
        run: |
          TOOLDIR="$RUNNER_TOOL_CACHE/arm-gnu-toolchain-${ARM_VER}"
          mkdir -p "$TOOLDIR"
          if [ ! -x "$TOOLDIR/bin/arm-none-eabi-gcc" ]; then
            curl -L -o /tmp/${ARM_TAR} ${ARM_URL}
            tar -C "$TOOLDIR" --strip-components=1 -xf /tmp/${ARM_TAR}
          fi
          echo "$TOOLDIR/bin" >> "$GITHUB_PATH"

      # compute cache key（根據 ETag/Last-Modified； use date if fail）
      - name: Compute cache key (renode-latest.linux-portable.tar)
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          URL="https://builds.renode.io/renode-latest.linux-portable.tar.gz"
          META="$(curl -sI "$URL" | tr -d '\r' | awk -F': ' 'tolower($1)=="etag"||tolower($1)=="last-modified"{print $2}' | tr '\n' ' ')"
          if [ -z "$META" ]; then META="$(date -u +%Y%m%d)"; fi
          KEY="$(printf "%s" "$META" | sha256sum | cut -d' ' -f1)"
          echo "key=$KEY" >> "$GITHUB_OUTPUT"

      - name: Restore Renode portable from cache
        id: cache
        uses: actions/cache@v4
        with:
          path: renode_portable
          key: renode-portable-${{ steps.meta.outputs.key }}
          restore-keys: |
            renode-portable-

      - name: Download & extract Renode portable (if cache miss)
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -eux
          mkdir -p renode_portable
          wget -q https://builds.renode.io/renode-latest.linux-portable.tar.gz -O renode-latest.linux-portable.tar.gz
          tar xf renode-latest.linux-portable.tar.gz -C renode_portable --strip-components=1

      - name: Show Renode version
        run: ./renode_portable/renode --version

      - name: Cache nrfxlib
        id: cache-nrfxlib
        uses: actions/cache@v4
        with:
          path: ${{ env.NRFXLIB_DIR }}
          key: nrfxlib-${{ env.NRFXLIB_TAG }}

      - name: Fetch nrfxlib (cache miss only)
        if: steps.cache-nrfxlib.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: nrfconnect/sdk-nrfxlib
          ref: ${{ env.NRFXLIB_TAG }}
          path: ${{ env.NRFXLIB_DIR }}
          fetch-depth: 1

      - name: Assert nrfxlib present
        run: test -d "${NRFXLIB_DIR}/crypto"

      - name: Locate nrf_cc310_bl static libs (soft-float only)
        run: |
          set -euo pipefail
          ROOT="${NRFXLIB_DIR:-${GITHUB_WORKSPACE}/third_party/nrfxlib}"
          paths=$(find "${roots[@]}" -type f -name 'libnrf_cc310_bl*.a' 2>/dev/null | grep '/soft-float/' | sort -u)
          if [ -z "$paths" ]; then
            echo "FATAL: no libnrf_cc310_bl*.a (soft-float) found" >&2
            find "${roots[@]}" -type f -name 'libnrf_cc310_bl*.a' 2>/dev/null | sort -u || true
            exit 1
          fi
          printf '%s\n' "$paths"
          {
            echo 'cc310_bl_paths<<EOF'
            printf '%s\n' "$paths"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Find CC310/CC312 C/H files in nrfxlib
        shell: bash
        run: |
          set -euo pipefail
          ROOT="${NRFXLIB_DIR:-${GITHUB_WORKSPACE}/third_party/nrfxlib}"
          test -d "$ROOT" || { echo "FATAL: nrfxlib not found at $ROOT"; exit 1; }
      
          # find file/path contains cc310/cc312 .c/.h files (case-insensitive)
          mapfile -t HITS < <(
            find "$ROOT" -type f \
              \( -iname "*cc31[02]*.c" -o -iname "*cc31[02]*.h" \
                 -o -ipath "*/cc31[02]/*.c" -o -ipath "*/cc31[02]/*.h" \) \
              | sort
          )
      
          if [ "${#HITS[@]}" -eq 0 ]; then
            echo "FATAL: No CC310/CC312 .c/.h files under $ROOT"
            exit 1
          fi
      
          printf 'FOUND: %s\n' "${HITS[@]}"

      #- name: Build x86
      #  run: |
      #    set -e
      #    make clean
      #    make TARGET=x86 KAT_RNG=1

      - name: Build nrf52840
        run: |
          set -e
          make clean
          make TARGET=nrf52840 NRFXLIB_DIR="${NRFXLIB_DIR}" KAT_RNG=1

      - name: Show sign_nrf52840.map
        shell: bash
        run: |
          set -e
          head -n 300 sign_nrf52840.map

      - name: Run in Renode (nrf52840)
        run: make TARGET=nrf52840 NRFXLIB_DIR="${NRFXLIB_DIR}" ci-run-nrf52840

      #- name: Build nRF5340 DK
      #  run: |
      #    set -e
      #    make clean
      #    make TARGET=nrf5340dk NRFXLIB_DIR="${NRFXLIB_DIR}" KAT_RNG=1

      #- name: Show sign_nrf5340dk.map
      #  shell: bash
      #  run: |
      #    set -e
      #    head -n 300 sign_nrf5340dk.map

      #- name: Run in Renode (nrf5340dk)
      #  run: make TARGET=nrf5340dk NRFXLIB_DIR="${NRFXLIB_DIR}" ci-run-nrf5340dk
